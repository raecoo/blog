<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Nothing Impossible]]></title>
  <link href="http://raecoo.github.com/blog/atom.xml" rel="self"/>
  <link href="http://raecoo.github.com/blog/"/>
  <updated>2013-01-13T16:54:14+08:00</updated>
  <id>http://raecoo.github.com/blog/</id>
  <author>
    <name><![CDATA[Raecoo Cao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Migration Blog to Jekyll and Heroku]]></title>
    <link href="http://raecoo.github.com/blog/2010/05/30/migration-blog-to-jekyll-and-heroku.html"/>
    <updated>2010-05-30T00:00:00+08:00</updated>
    <id>http://raecoo.github.com/blog/2010/05/30/migration-blog-to-jekyll-and-heroku</id>
    <content type="html"><![CDATA[<p>周末研究了一下Jekyll这个开源的静态博客生成系统, 感觉棒极了, 一直以来就希望将自己的网站迁移成一个全静态的平台下, 这样一来网站自身对部署环境依赖将进一步减少, 并且可以很方便的部署与备份.</p>

<p>我个人的网站主要是以博客文章发布为主, 并且我不需要流行的在线编辑器, 所以用Jekyll + Disqus + Heroku来部署一个全新的静态网站是我的最佳选择, 更重点的一点是这样的组合甚至不需要花一分钱在主机租用上, 就目前Heroku提供的100M空间对于一个纯静态的网站来说可以说是足够用(其实我写博客的频度比较低).</p>

<p>在这里首先要感谢一下<a href="http://galeki.com/">galeki</a>, 免费让我在他的服务器上寄居了长达一年半的时间, 其次当然是Jekyll的作者<a href="http://github.com/mojombo">Tom Preston-Werner</a>, 谢谢他写了这么棒的程序并开源给大家使用.</p>

<p>随后我会写一篇关于如何利用Jekyll搭建全静态WEB应用的文章. 希望对感兴趣的朋友有所帮助.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Highlight Test]]></title>
    <link href="http://raecoo.github.com/blog/2010/05/29/code-highlight-test.html"/>
    <updated>2010-05-29T00:00:00+08:00</updated>
    <id>http://raecoo.github.com/blog/2010/05/29/code-highlight-test</id>
    <content type="html"><![CDATA[<div>
  <pre><code class='ruby'>mkdir /opt
 mkdir /opt/oracle
 cd /opt/oracle
 unzip path/to/instantclient-basic-OS-VERSION.zip
 unzip path/to/instantclient-sdk-OS-VERSION.zip
 cd path/to/instantclient
 ln -s libclntsh.dylib.10.1 libclntsh.dylib

 ORACLE_HOME=/opt/oracle/instantclient_10_2
 DYLD_LIBRARY_PATH=/opt/oracle/instantclient_10_2
 export PATH=$DYLD_LIBRARY_PATH:$ORACLE_HOME:$PATH

 gzip -dc ruby-oci8-2.0.4.tar.gz | tar xvf -
 cd ruby-oci8-2.0.4
 make
 make install</code></pre>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Don't forget the id column in query with select option]]></title>
    <link href="http://raecoo.github.com/blog/2010/05/21/dont-forget-the-id-column-in-query-with-select-option.html"/>
    <updated>2010-05-21T00:00:00+08:00</updated>
    <id>http://raecoo.github.com/blog/2010/05/21/dont-forget-the-id-column-in-query-with-select-option</id>
    <content type="html"><![CDATA[<pre><code>>> >> g = Game.find(:all, :select=>'title').first
=> #<Game title: "World of Goo">
>> g.title # Question
=> nil
>> g[:title]
=> "World of Goo"
>> g = Game.find(:all, :select=>'id, title').first
=> #<Game id: 1219, title: "World of Goo">
>> g.title
=> "World of Goo"</code></pre>


<p>Anwser:</p>

<p>Default, the Rails will be select all columns of the table and you can use the Object.attribute_name to reference the column value, otherwise, just load the special columns within :select option value. at this time, if you didn&#8217;t add the id column in :select option, so that you need to reference the column value as a element of an array.</p>

<p>I guess Rails use the id column to mark the Object in memory, Anyway, let&#8217;s read the source code to find out the finally reasons.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[install ruby-oci8 on snow leopard]]></title>
    <link href="http://raecoo.github.com/blog/2010/05/08/install-ruby-oci8-on-snow-leopard.html"/>
    <updated>2010-05-08T00:00:00+08:00</updated>
    <id>http://raecoo.github.com/blog/2010/05/08/install-ruby-oci8-on-snow-leopard</id>
    <content type="html"><![CDATA[<p>Download ruby-oci8-2.0.4.tar.gz from <a href="http://rubyforge.org/frs/?group_id=256">rubyforge</a>.</p>

<p>Download at least two packages &#8220;Instant Client Package - Basic&#8221; and &#8220;Instant Client Package - SDK&#8221; from <a href="http://www.oracle.com/technology/tech/oci/instantclient/index.html">Oracle Technology Network</a>.</p>

<pre><code> mkdir /opt
 mkdir /opt/oracle
 cd /opt/oracle
 unzip path/to/instantclient-basic-OS-VERSION.zip
 unzip path/to/instantclient-sdk-OS-VERSION.zip
 cd path/to/instantclient
 ln -s libclntsh.dylib.10.1 libclntsh.dylib

 ORACLE_HOME=/opt/oracle/instantclient_10_2
 DYLD_LIBRARY_PATH=/opt/oracle/instantclient_10_2
 export PATH=$DYLD_LIBRARY_PATH:$ORACLE_HOME:$PATH

 gzip -dc ruby-oci8-2.0.4.tar.gz | tar xvf -
 cd ruby-oci8-2.0.4
 make
 make install</code></pre>


<p>or install it by gem</p>

<pre><code>env DYLD_LIBRARY_PATH=/opt/oracle/instantclient_10_2/ ARCHFLAGS="-arch x86_64" gem install ruby-oci8</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[String truncate in PHP]]></title>
    <link href="http://raecoo.github.com/blog/2010/04/26/string-truncate-in-php.html"/>
    <updated>2010-04-26T00:00:00+08:00</updated>
    <id>http://raecoo.github.com/blog/2010/04/26/string-truncate-in-php</id>
    <content type="html"><![CDATA[<pre><code>  function truncate($str,$len,$suffix = false) 
  { 
    if (strlen($str) <= $len ) 
    { 
      return $str; 
    }else { 
      $i = 0; 
      while ($i < $len) 
      { 
        $tmp = substr($str,$i,1); 
        if ( ord($tmp) >=224 ){ 
          $tmp = substr($str,$i,3); 
          $i = $i + 3; 
        }elseif( ord($tmp) >=192 ){ 
          $tmp = substr($str,$i,2); 
          $i = $i + 2; 
        }else{ 
          $i = $i + 1; 
        } 
        $strLast[] = $tmp; 
      } 
      $strLast = implode("",$strLast); 
      if($suffix){ 
        $strLast .= "..."; 
      } 
      return $strLast; 
    } 
  }</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mysql explain的使用详解]]></title>
    <link href="http://raecoo.github.com/blog/2010/04/02/introduction-explain-command-of-mysql.html"/>
    <updated>2010-04-02T00:00:00+08:00</updated>
    <id>http://raecoo.github.com/blog/2010/04/02/introduction-explain-command-of-mysql</id>
    <content type="html"><![CDATA[<p>EXPLAIN 解释：</p>

<p><strong>table</strong>：显示这一行的数据是关于哪张表的
<strong>type</strong>：这是重要的列，显示连接使用了何种类型。从最好到最差的连接类型为const、eq_reg、ref、range、indexhe和 ALL
<strong>possible_keys</strong>：显示可能应用在这张表中的索引。如果为空，没有可能的索引。可以为相关的域从WHERE语句中选择一个合适的语句
<strong>key</strong>：实际使用的索引。如果为NULL，则没有使用索引。很少的情况下，MYSQL会 选择优化不足的索引。这种情况下，可以在SELECT语句中使用 USE INDEX（indexname）来强制使用一个索引或者用IGNORE INDEX（indexname）来强制MYSQL忽略索引
<strong>key_len</strong>：使用的索引的长度。在不损失精确性的情况下，长度越短越好
<strong>ref</strong>：显示索引的哪一列被使用了，如果可能的话，是一个常数
<strong>rows</strong>：MYSQL认为必须检查的用来返回请求数据的行数
<strong>Extra</strong>：关于MYSQL如何解析查询的额外信息。将在表4.3中讨论，但这里可 以看到的坏的例子是Using temporary和Using filesort，意思MYSQL根 本不能使用索引，结果是检索会很慢
extra列返回的描述的意义
Distinct:一旦MYSQL找到了与行相联合匹配的行，就不再搜索了
Not exists: MYSQL优化了LEFT JOIN，一旦它找到了匹配LEFT JOIN标准的行，就不再搜索了
Range checked for each Record（index map:#）:没有找到理想的索引，因此对于从前面表中来的每一个行组合，MYSQL检查使 用哪个索引，并用它来从表中返回行。这是使用索引的最慢的连接之一
Using filesort: 看到这个的时候，查询就需要优化了。MYSQL需 要进行额外的步骤来发现如何对返回的行排序。它根据连接类型以及存储排序键值和匹配条件的全部行的行指针来排序全部行
Using index: 列数据是从仅仅使用了索引中的信息而没有读取实际的行动的表返回的，这发生在对表的全部的请求列都是同一个索引的部分的时候
Using temporary 看到这个的时候，查询需要优化了。这里，MYSQL需 要创建一个临时表来存储结果，这通常发生在对不同的列集进行ORDER BY上，而不是GROUP BY上
Where used 使用了WHERE从句来限制哪些行将与下一张表匹配或者是返回给用户。如果不想返回表中的全部行，并且连接类型ALL或index，这就会发生，或者是查 询有问题不同连接类型的解释（按照效率高低的顺序排序）
system 表只有一行：system表。这是const连接类型的特殊情况
const:表中的一个记录的最大值能够匹配这个查询（索引可以是主键或惟一索引）。因为只有一行，这个值实际就是常数，因为MYSQL先读这个值然后把它当做常数来对待
eq_ref:在连接中，MYSQL在查询时，从前面的表中，对每一个记录的联合都 从表中读取一个记录，它在查询使用了索引为主键或惟一键的全部时使用
ref:这个连接类型只有在查询使用了不是惟一或主键的键或者是这些类型的部分（比如，利用最左边前缀）时发生。对于之前的表的每一个行联合，全 部记录都将从表中读出。这个类型严重依赖于根据索引匹配的记录多少—越少越好
range:这个连接类型使用索引返回一个范围中的行，比如使用>或&lt;查找东西时发生的情况
index: 这个连接类型对前面的表中的每一个记录联合进行完全扫描（比ALL更好，因为索引一般小于表数据）
ALL:这个连接类型对于前面的每一个记录联合进行完全扫描，这一般比较糟糕，应该尽量避免</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugger for Flash and AIR]]></title>
    <link href="http://raecoo.github.com/blog/2010/03/27/debugger-for-flash-and-air.html"/>
    <updated>2010-03-27T00:00:00+08:00</updated>
    <id>http://raecoo.github.com/blog/2010/03/27/debugger-for-flash-and-air</id>
    <content type="html"><![CDATA[<p>introduction:
<a href="http://www.flickr.com/photos/raecoo/4464257505/" title="Flickr 上 Raecoo 的 Arthropod introduction"><img src="http://farm5.static.flickr.com/4006/4464257505_f66b3807b6_o.png" width="555" height="608" alt="Arthropod introduction" /></a></p>

<p>running screenshot:
<a href="http://www.flickr.com/photos/raecoo/4465034562/" title="Flickr 上 Raecoo 的 Arthropod running screenshot"><img src="http://farm5.static.flickr.com/4056/4465034562_e257e6b628_o.jpg" width="490" height="388" alt="Arthropod running screenshot" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[升级Leopard默认JDK版本至1.6]]></title>
    <link href="http://raecoo.github.com/blog/2010/01/13/upgrade-leopard-java-to-1-6-x.html"/>
    <updated>2010-01-13T00:00:00+08:00</updated>
    <id>http://raecoo.github.com/blog/2010/01/13/upgrade-leopard-java-to-1-6-x</id>
    <content type="html"><![CDATA[<ol>
<li>打开  /Application/Utilities/Java Preferences.app</li>
<li>分别在&#8221;Java Applet plugin&#8221;和&#8221;Java Application&#8221;中将&#8221;Java SE 6 (64bit)&#8221;拖动到列表的顶端;</li>
<li>在终端执行以下命令(貌似不执行也可以):</li>
</ol>


<pre><code> cd /System/Library/Frameworks/JavaVM.framework/Versions
 sudo mv CurrentJDK CurrentJDK.orig</code></pre>


<ol>
<li>java(c) -version 查看版本.</li>
</ol>


<p>BTW: go to <a href="http://www.eclipse.org/downloads/download.php?file=/eclipse/downloads/drops/R-3.5.1-200909170800/eclipse-SDK-3.5.1-macosx-cocoa-x86_64.tar.gz">here</a> to download Eclipse 64bit for Mac.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby中的日期格式化]]></title>
    <link href="http://raecoo.github.com/blog/2009/12/27/format-date-in-ruby.html"/>
    <updated>2009-12-27T00:00:00+08:00</updated>
    <id>http://raecoo.github.com/blog/2009/12/27/format-date-in-ruby</id>
    <content type="html"><![CDATA[<p>  %a - The abbreviated weekday name (<code>Sun'')
  %A - The  full  weekday  name (</code>Sunday&#8221;)
  %b - The abbreviated month name (<code>Jan'')
  %B - The  full  month  name (</code>January&#8221;)
  %c - The preferred local date and time representation
  %d - Day of the month (01..31)
  %H - Hour of the day, 24-hour clock (00..23)
  %I - Hour of the day, 12-hour clock (01..12)
  %j - Day of the year (001..366)
  %m - Month of the year (01..12)
  %M - Minute of the hour (00..59)
  %p - Meridian indicator (<code>AM''  or </code>PM&#8221;)
  %S - Second of the minute (00..60)
  %U - Week  number  of the current year, starting with the first Sunday as the first day of the first week (00..53)
  %W - Week  number  of the current year, starting with the first Monday as the first day of the first week (00..53)
  %w - Day of the week (Sunday is 0, 0..6)
  %x - Preferred representation for the date alone, no time
  %X - Preferred representation for the time alone, no date
  %y - Year without a century (00..99)
  %Y - Year with century
  %Z - Time zone name
  %% - Literal &#8220;%&#8221; character</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Translates Authlogic validates message]]></title>
    <link href="http://raecoo.github.com/blog/2009/12/18/authlogic-validates-message-i18n.html"/>
    <updated>2009-12-18T00:00:00+08:00</updated>
    <id>http://raecoo.github.com/blog/2009/12/18/authlogic-validates-message-i18n</id>
    <content type="html"><![CDATA[<pre><code>  authlogic:
    error_messages:
      login_blank: can not be blank
      login_not_found: is not valid
      login_invalid: should use only letters, numbers, spaces, and .-_@ please.
      consecutive_failed_logins_limit_exceeded: Consecutive failed logins limit exceeded, account is disabled.
      email_invalid: should look like an email address.
      password_blank: can not be blank
      password_invalid: is not valid
      not_active: Your account is not active
      not_confirmed: Your account is not confirmed
      not_approved: Your account is not approved
      no_authentication_details: You did not provide any details for authentication.
    models:
      user_session: UserSession (or whatever name you are using)
    attributes:
      user_session: (or whatever name you are using)
        login: login
        email: email
        password: password
        remember_me: remember me</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Postfix, Courier及MySql构建自已的邮件服务器]]></title>
    <link href="http://raecoo.github.com/blog/2009/12/09/using-postfix-with-courier-and-mysql-on-debian.html"/>
    <updated>2009-12-09T00:00:00+08:00</updated>
    <id>http://raecoo.github.com/blog/2009/12/09/using-postfix-with-courier-and-mysql-on-debian</id>
    <content type="html"><![CDATA[<p>本文将介绍如何在Ubuntu上运行Postfix邮件系统, 使用Courier提供IMAP/POP3(IMAPS and POP3S)服务, 并将虚拟域和用户数据保存于MySql中.</p>

<p><strong>1. 安装必须的软件包</strong></p>

<pre><code>apt-get install postfix postfix-mysql postfix-doc mysql-client mysql-server courier-authdaemon \
        courier-authlib-mysql courier-pop courier-pop-ssl courier-imap courier-imap-ssl \
        libsasl2-2 libsasl2-modules libsasl2-modules-sql sasl2-bin libpam-mysql openssl</code></pre>


<p>安装过程中需要输入MySql的root密码, 在选择邮件服务器类型时选择&#8221;Internet Site&#8221;, 在输入system mail name
时请输入一个完整的域名并指向服务器的IP地址.</p>

<!--more-->


<p><strong>2. 设置虚拟域及用户</strong></p>

<pre><code>$mysql -uroot -p
mysql>create database mail_system;
mysql>use mail_system;
mysql>GRANT ALL ON mail_system.* TO 'mail_admin'@'localhost' IDENTIFIED BY 'mail_admin_password';
mysql>FLUSH PRIVILEGES;</code></pre>


<p>创建虚拟域数据表</p>

<pre><code>mysql>CREATE TABLE domains (domain varchar(50) NOT NULL, PRIMARY KEY (domain) );</code></pre>


<p>创建虚拟用户数据表</p>

<pre><code>mysql>CREATE TABLE users (email varchar(80) NOT NULL, password varchar(20) NOT NULL,
  PRIMARY KEY (email) );</code></pre>


<p>创建邮件转发数据表(可选项)</p>

<pre><code>mysql>CREATE TABLE forwardings (source varchar(80) NOT NULL, destination TEXT NOT NULL,
  PRIMARY KEY (source) );</code></pre>


<p>创建Transport数据表(可选项)</p>

<pre><code>mysql>CREATE TABLE transport (domain varchar(128) NOT NULL default '', transport varchar(128) NOT NULL default '', UNIQUE KEY domain (domain));</code></pre>


<p>绑定MySql</p>

<pre><code>$vim /etc/mysql/my.cnf
bind-address = 127.0.0.1</code></pre>


<p>重启MySql</p>

<pre><code>$/etc/init.d/mysql restart</code></pre>


<p><strong>3. 设置Postfix使其支持MySql</strong></p>

<p>创建虚拟域配置文件</p>

<pre><code>$vim /etc/postfix/mysql-virtual_domains.cf
user = mail_admin
password = mail_admin_password
dbname = mail_system
query = SELECT domain AS virtual FROM domains WHERE domain='%s'
hosts = 127.0.0.1</code></pre>


<p>创建虚拟收件箱配置文件</p>

<pre><code>$vim /etc/postfix/mysql-virtual_mailboxes.cf
user = mail_admin
password = mail_admin_password
dbname = mail_system
query = SELECT CONCAT(SUBSTRING_INDEX(email,'@',-1),'/',SUBSTRING_INDEX(email,'@',1),'/')
        FROM users WHERE email='%s'
hosts = 127.0.0.1</code></pre>


<p>创建虚拟转发配置文件(可选项)</p>

<pre><code>$/etc/postfix/mysql-virtual_forwardings.cf
user = mail_admin
password = mail_admin_password
dbname = mail_system
query = SELECT destination FROM forwardings WHERE source='%s'
hosts = 127.0.0.1</code></pre>


<p>创建虚拟邮件关系配置文件(可选项)</p>

<pre><code>$vim /etc/postfix/mysql-virtual_email2email.cf
user = mail_admin
password = mail_admin_password
dbname = mail_system
query = SELECT email FROM users WHERE email='%s'
hosts = 127.0.0.1</code></pre>


<p>设置文件权限与属主信息</p>

<pre><code>$chmod o= /etc/postfix/mysql-virtual_*.cf
$chgrp postfix /etc/postfix/mysql-virtual_*.cf</code></pre>


<p>接下来, 创建用来处理邮件的用户和组, 所有邮件将保存于此用户的HOME目录,并以虚拟域独立保存</p>

<pre><code>$groupadd -g 5000 vmail
$useradd -g vmail -u 5000 vmail -d /home/vmail -m</code></pre>


<p>修改Postfix的配置文件如下:</p>

<pre><code>myhostname = mail.raecoo.com
mydestination = mail.raecoo.com, localhost, localhost.localdomain
message_size_limit = 30720000
virtual_alias_domains = 
virtual_alias_maps = proxy:mysql:/etc/postfix/mysql-virtual_forwardings.cf, mysql:/etc/postfix/mysql-virtual_email2email.cf
virtual_mailbox_domains = proxy:mysql:/etc/postfix/mysql-virtual_domains.cf
virtual_mailbox_maps = proxy:mysql:/etc/postfix/mysql-virtual_mailboxes.cf
virtual_mailbox_base = /home/vmail
virtual_uid_maps = static:5000
virtual_gid_maps = static:5000
smtpd_sasl_auth_enable = yes
broken_sasl_auth_clients = yes
smtpd_sasl_authenticated_header = yes
smtpd_recipient_restrictions = permit_mynetworks, permit_sasl_authenticated,reject_unauth_destination
smtpd_use_tls = yes
smtpd_tls_cert_file = /etc/postfix/smtpd.cert
smtpd_tls_key_file = /etc/postfix/smtpd.key
virtual_create_maildirsize = yes
virtual_maildir_extended = yes
proxy_read_maps = $local_recipient_maps $mydestination $virtual_alias_maps $virtual_alias_domains $virtual_mailbox_maps $virtual_mailbox_domains $relay_recipient_maps $relay_domains $canonical_maps $sender_canonical_maps $recipient_canonical_maps $relocated_maps $transport_maps $mynetworks $virtual_mailbox_limit_maps</code></pre>


<p><strong>为Postfix创建SSL证书</strong></p>

<pre><code>$ cd /etc/postfix
$openssl req -new -outform PEM -out smtpd.cert -newkey rsa:2048 -nodes -keyout smtpd.key
        -keyform PEM -days 365 -x509</code></pre>


<p>一路回车或是将信息填写完整, 再设置一下证书的权限</p>

<pre><code>$chmod o= /etc/postfix/smtpd.key</code></pre>


<p><strong>4. 设置Saslauthd服务使其支持MySql</strong></p>

<pre><code>$mkdir -p /var/spool/postfix/var/run/saslauthd
$vim /etc/default/saslauthd
#更改START和OPTIONS为如下所示
START=yes
OPTIONS="-c -m /var/spool/postfix/var/run/saslauthd -r"</code></pre>


<p>创建或编辑/etc/pam.d/smtp, 并添加如下内容(注意是auth和account共两行)</p>

<pre><code>auth    required   pam_mysql.so user=mail_admin passwd=mail_admin_password host=127.0.0.1
        db=mail table=users usercolumn=email passwdcolumn=password crypt=1
account sufficient pam_mysql.so user=mail_admin passwd=mail_admin_password host=127.0.0.1
        db=mail table=users usercolumn=email passwdcolumn=password crypt=1</code></pre>


<p>创建或编辑/etc/postfix/sasl/smtpd.conf</p>

<pre><code>$vim /etc/postfix/sasl/smtpd.conf
pwcheck_method: saslauthd
mech_list: plain login
allow_plaintext: true
auxprop_plugin: mysql
sql_hostnames: 127.0.0.1
sql_user: mail_admin
sql_passwd: mail_admin_password
sql_database: mail
sql_select: select password from users where email = '%u'</code></pre>


<p>添加Postfix用户至Sasl组并重启服务</p>

<pre><code>$/etc/init.d/postfix restart
$/etc/init.d/saslauthd restart</code></pre>


<p><strong>5. 设置Courier使其支持MySql</strong>
编辑/etc/courier/authdaemonrc文件修改authmodulelist选项值为authmysql</p>

<pre><code>....
authmodulelist="authmysql"
....</code></pre>


<p>编辑/etc/courier/authmysqlrc文件如下</p>

<pre><code>MYSQL_SERVER localhost
MYSQL_USERNAME mail_admin
MYSQL_PASSWORD mail_admin_password
MYSQL_PORT 0
MYSQL_DATABASE mail
MYSQL_USER_TABLE users
MYSQL_CRYPT_PWFIELD password
MYSQL_UID_FIELD 5000
MYSQL_GID_FIELD 5000
MYSQL_LOGIN_FIELD email
MYSQL_HOME_FIELD "/home/vmail"
MYSQL_MAILDIR_FIELD CONCAT(SUBSTRING_INDEX(email,'@',-1),'/',SUBSTRING_INDEX(email,'@',1),'/')</code></pre>


<p>删除Courier创建的证书</p>

<pre><code>$rm -f /etc/courier/imapd.pem
$rm -f /etc/courier/pop3d.pem</code></pre>


<p>分别编辑/etc/courier/imapd.cnf和/etc/courier/pop3d.cnf, 将其中的CN=localhost选项修改为上述中提到的system mail name, 其他选项可以根据需要自行修改, 最后重新生成Courier证书并重启服务</p>

<pre><code>$cd /etc/courier
$mkimapdcert
$mkpop3dcert
$/etc/init.d/courier-authdaemon restart
$/etc/init.d/courier-imap restart
$/etc/init.d/courier-imap-ssl restart
$/etc/init.d/courier-pop restart
$/etc/init.d/courier-pop-ssl restart</code></pre>


<p>这时就可以用telnet来测试一下POP3服务是否正常工作</p>

<pre><code>$telnet localhost pop3
#你将看到如下字样
Trying 127.0.0.1...
Connected to localhost.localdomain.
Escape character is '^]'.
+OK Hello there.</code></pre>


<p><strong>6. 设置Email别名</strong>
编辑别名配置文件
$vim /etc/aliases
postmaster: root
root: post@raecoo.com
更新文件并重启服务</p>

<pre><code>$newaliases
$/etc/init.d/postfix restart</code></pre>


<p><strong>7. 测试Postfix安装结果</strong></p>

<pre><code>$telnet localhost 25
#连接后输入
ehlo localhost
#将看到如下信息
Trying 127.0.0.1...
Connected to localhost.localdomain.
Escape character is '^]'.
220 mail.raecoo.com ESMTP Postfix
ehlo localhost
250-archimedes.palegray.net
250-PIPELINING
250-SIZE 30720000
250-VRFY
250-ETRN
250-STARTTLS
250-AUTH CRAM-MD5 NTLM PLAIN LOGIN DIGEST-MD5
250-AUTH=CRAM-MD5 NTLM PLAIN LOGIN DIGEST-MD5
250-ENHANCEDSTATUSCODES
250-8BITMIME
250 DSN</code></pre>


<p><strong>8. 最后就是添加虚拟域和用户数据了</strong></p>

<pre><code>$mysql -u root -p
mysql>use mail_system;
mysql>INSERT INTO domains (domain) VALUES ('raecoo.com');
mysql>INSERT INTO users (email, password) VALUES ('sales@raecoo.com', ENCRYPT('password'));</code></pre>


<p>现在来测试一下邮件发送</p>

<pre><code>#安装一个命令行的邮件发送工具
apt-get install mailx
echo "email body" > /tmp/email_test.txt
mailx -s "email subject" sales@raecoo.com < /tmp/email_test.txt</code></pre>


<p>嗯,现在就可以用客户端连接POP3邮箱进行邮件查收了.</p>

<p>这里有一个需要注意的地方就是, 当新创建一个虚拟用户后,该用户收件箱对应的文件夹并不会自动创建. 解决这个问题的方法就是在创建用户后先向此用户发送一个Say Hello的邮件.
还有就是虚拟域的文件夹也是需要提前创建好的, 否则在用户使用POP3登录认证时会发生找不到文件目录的错误.
例如添加了虚拟域raecoo.com, 那就需要在/home/vmail下创建一个名为raecoo.com的目录
References:
http://www.howtoforge.com/virtual-users-domains-postfix-courier-mysql-squirrelmail-ubuntu8.10
https://help.ubuntu.com/community/PostfixBasicSetupHowto
https://help.ubuntu.com/community/Postfix</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Rails应用中使用960.gs CSS框架]]></title>
    <link href="http://raecoo.github.com/blog/2009/12/04/use-960-gs-on-rails-application.html"/>
    <updated>2009-12-04T00:00:00+08:00</updated>
    <id>http://raecoo.github.com/blog/2009/12/04/use-960-gs-on-rails-application</id>
    <content type="html"><![CDATA[<p>本文介绍通过 <strong><a href="http://compass-style.org/">Compass</a></strong> 以 <strong><a href="http://sass-lang.com/">Sass</a></strong> 方式集成960.gs与Rails应用程序.</p>

<ol>
<li>安装相关gem</li>
</ol>


<pre><code>$sudo gem install compass compass-960-plugin</code></pre>


<ol>
<li>生成Rails应用程序, 并绑定960.gs</li>
</ol>


<pre><code>$rails 960-demo
$cd 960-demo
$compass --rails -f 960 . --css-dir=public/stylesheets --sass-dir=app/sass -r ninesixty</code></pre>


<p>OK, 集成结束.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Fancy-Buttons制作漂亮的按钮]]></title>
    <link href="http://raecoo.github.com/blog/2009/12/04/fancy-buttons.html"/>
    <updated>2009-12-04T00:00:00+08:00</updated>
    <id>http://raecoo.github.com/blog/2009/12/04/fancy-buttons</id>
    <content type="html"><![CDATA[<p><a href="http://github.com/imathis/fancy-buttons"><img src="http://s3.imathis.com/dev/compass/fancy-buttons/demo.png" alt="Fancy Buttons" /></a></p>

<p>Fancy Buttons是一个优雅的按钮样式生成器, 正如上图所示, 用它可以制作出多种漂亮的按钮.</p>

<p>安装</p>

<pre><code>$sudo gem install fancy-buttons compass-colors</code></pre>


<p>独立使用</p>

<pre><code>$compass -r compass-colors -r fancy-buttons -f fancy-buttons your_project_name</code></pre>


<p>与Rails集成</p>

<pre><code>$compass --rails -r compass-colors -r fancy-buttons -f fancy-buttons --css-dir=public/stylesheets --sass-dir=app/sass . </code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开启Safari的Web调试工具]]></title>
    <link href="http://raecoo.github.com/blog/2009/12/01/enabled-web-development-tool-on-safari-4.html"/>
    <updated>2009-12-01T00:00:00+08:00</updated>
    <id>http://raecoo.github.com/blog/2009/12/01/enabled-web-development-tool-on-safari-4</id>
    <content type="html"><![CDATA[<p>在终端内输入如下内容即可:</p>

<pre><code>$defaults write com.apple.Safari  WebKitDeveloperExtras -bool true</code></pre>


<p>重启Safari, 样子和Chrome的几乎一样, 看赶来还不错.</p>

<p>UPDATE:
强制以标签打开网页</p>

<pre><code>$defaults write com.apple.Safari TargetedClicksCreateTabs -bool true</code></pre>


<p>让Finder支持剪切操作</p>

<pre><code>$defaults write com.apple.finder AllowCutForItems 1</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解决Passenger的Unexpected end-of- file detected异常]]></title>
    <link href="http://raecoo.github.com/blog/2009/11/25/fix-passenger-the-application-spawner-exception.html"/>
    <updated>2009-11-25T00:00:00+08:00</updated>
    <id>http://raecoo.github.com/blog/2009/11/25/fix-passenger-the-application-spawner-exception</id>
    <content type="html"><![CDATA[<p>今天在启动一个项目时出现了如下错误信息:</p>

<pre><code>Passenger encountered the following error:

The application spawner server exited unexpectedly: Unexpected end-of-
file detected.

Exception class:
    PhusionPassenger::Railz::ApplicationSpawner::Error 
</code></pre>


<p>运行环境: Apache + Passenger(2.2.7) + REE 1.8.7
解决方法: 安装项目依赖的gem包, 如仍有异常请尝试卸载并重新安装依赖gem.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby收取Gmail邮件]]></title>
    <link href="http://raecoo.github.com/blog/2009/11/24/use-ruby-retrieving-gmail-via-pop3.html"/>
    <updated>2009-11-24T00:00:00+08:00</updated>
    <id>http://raecoo.github.com/blog/2009/11/24/use-ruby-retrieving-gmail-via-pop3</id>
    <content type="html"><![CDATA[<p>Gmail的POP3需要用SSL方式才能访问, 今天写了段代码才发现,原来Ruby 1.8.6原生的POP3类库并不支持SSL, 换成1.8.7后就可以了, 看来应该把所有环境里的Ruby版本都进行一下升级了.</p>

<pre><code>#!/usr/bin/env ruby
require 'net/pop'
require 'rubygems'
require 'tmail'

begin
  timeout(30) {
    # set SSL for gmail
    Net::POP3.enable_ssl(OpenSSL::SSL::VERIFY_NONE) # raise exception when ruby version < 1.8.7
    Net::POP3.start("pop.gmail.com", 995, "full-email-address", "password") do |pop|   
      unless pop.mails.empty?
        puts "-- size #{pop.mails.size}"
        pop.mails.each do |email|   
          begin   
            puts "-- receiving mail..." 
            m = TMail::Mail.parse(email.pop)
            puts "-- #{m.subject} -> from: #{m.from}"
          rescue Exception => e   
            puts "Error receiving email at " + Time.now.to_s + "::: " + e.message   
          end   
        end   
      end  
    end
  }
rescue Exception => e
  puts "Exception. #{e.message}"
rescue TimeoutError => e
  puts "Timeout Error. #{e.message}"
end</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Ruby解析图片EXIF数据获取坐标信息]]></title>
    <link href="http://raecoo.github.com/blog/2009/11/23/get-gps-position-from-image-by-ruby.html"/>
    <updated>2009-11-23T00:00:00+08:00</updated>
    <id>http://raecoo.github.com/blog/2009/11/23/get-gps-position-from-image-by-ruby</id>
    <content type="html"><![CDATA[<p>最近在做一个项目时需要将图片EXIF信息解析出来并获取相应GPS坐标信息,用于在Google Map中使用, 找到了一些Ruby解析EXIF信息的类库, 相比之下还是 <a href="http://github.com/remvee/exifr">exifr</a>这个gem不错, 零依赖,直接ruby调用.</p>

<ol>
<li>获取EXIF信息</li>
</ol>


<pre><code>require 'rubygems'
require 'exifr'

obj = EXIFR::JPEG.new('geo.jpg')
if obj.exif?
  puts "--- EXIF information ---".center(50)
  hash  = obj.exif.to_hash
  hash.each_pair do |k, v|
    puts "-- #{k.to_s.rjust(20)} -> #{v}"
  end
end</code></pre>


<!--more-->


<p>运行上述代码后效果如下:</p>

<pre><code>             --- EXIF information ---             
--     gps_latitude_ref -> N
--    pixel_x_dimension -> 600
--   date_time_original -> Sat Nov 21 09:24:08 +0800 2009
--         y_resolution -> 72
--      resolution_unit -> 2
-- gps_img_direction_ref -> T
--     exposure_program -> 2
--   ycb_cr_positioning -> 1
--            sharpness -> 1
--    pixel_y_dimension -> 800
--                flash -> 32
--  date_time_digitized -> Sat Nov 21 09:24:08 +0800 2009
--                 make -> Apple
--    gps_img_direction -> 102933/295
--        gps_longitude -> 104809/200
--         focal_length -> 77/20
--                model -> iPhone 3GS
--             software -> 3.1.2
--       gps_time_stamp -> 924417/100
--    iso_speed_ratings -> 76
--    gps_longitude_ref -> W
--            date_time -> Sat Nov 21 09:24:08 +0800 2009
--        exposure_mode -> 0
--  shutter_speed_value -> 5855/1277
--        exposure_time -> 1/24
--         gps_latitude -> 391019/200
--       sensing_method -> 2
--          color_space -> 1
--        metering_mode -> 1
--         x_resolution -> 72
--        white_balance -> 0
--       aperture_value -> 4281/1441
--             f_number -> 14/5</code></pre>


<p>未加工前的坐标信息是以时/分/秒构成的, 类似这样:</p>

<pre><code>:gps_latitude=>[Rational(39, 1), Rational(1019, 20), Rational(0, 1)]</code></pre>


<p>为了在Google Map中显示图片拍摄的位置信息,需要得到坐标的两个值, 但直接获取的数据仍然需要进行一下加工方可正常使用.
2. 加工坐标信息</p>

<pre><code>lat = obj.exif[0].gps_latitude[0].to_f + (obj.exif[0].gps_latitude[1].to_f / 60) + (obj.exif[0].gps_latitude[2].to_f / 3600)
lat = lat * -1 if obj.exif[0].gps_latitude_ref == 'S'    # (N is +, S is -)
long = obj.exif[0].gps_longitude[0].to_f + (obj.exif[0].gps_longitude[1].to_f / 60) + (obj.exif[0].gps_longitude[2].to_f / 3600) 
long = long * -1 if obj.exif[0].gps_longitude_ref == 'W' # (W is -, E is +)</code></pre>


<p>加工后的坐标信息类似这样:</p>

<pre><code>39.8491666666667 #  lat
-104.674166666667 # long</code></pre>


<p>坐标转换方法</p>

<pre><code>#　Example. Assume a latitude of 45° 53' 36" (45 degrees, 53 minutes and 36 seconds). In degrees, the latitude will be:
latitude = 45 + (53 / 60) + (36 / 3600) = 45.89
#　General Formulation:
latitude (degrees) = degrees + (minutes / 60) + (seconds / 3600)</code></pre>


<p>完事, 收工. 如果希望得到验证,可以将产生的坐标信息录入<a href="http://code.google.com/apis/maps/documentation/v3/examples/geocoding-reverse.html">这里</a>进行检查.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[安装FFMpeg]]></title>
    <link href="http://raecoo.github.com/blog/2009/11/19/install-ffmpeg-on-centos.html"/>
    <updated>2009-11-19T00:00:00+08:00</updated>
    <id>http://raecoo.github.com/blog/2009/11/19/install-ffmpeg-on-centos</id>
    <content type="html"><![CDATA[<p>FFMPEG是一个开放源代码的跨平台的流媒体解码程序, N多的软件都采用它做为解码核心, 貌似还有一个叫 FFMPEG耻辱名单的玩意, 是指一些个商业公司不遵守FFMPEG的发布协议. 但毕竟是开源产品没有过多的法律保护, 也只能靠自控解决.</p>

<p>FFMPEG的依赖关系比较复杂, 同事曾经自行编译安装未遂, 而后找到一个RPM源, 直接升级安装即可, 不用再为依赖关系和漫长的make过程而头疼. 安装过程如下(CentOS):</p>

<ol>
<li>创建yum升级源配置文件(/etc/yum.repos.d/dag.repo), 并添加如下内容.</li>
</ol>


<pre><code>[dag]
name=DAG RPM Repository
baseurl=http://apt.sw.be/redhat/el$releasever/en/$basearch/dag
gpgcheck=1
enabled=1</code></pre>


<!--more-->


<ol>
<li>导入RPM认证key文件</li>
</ol>


<pre><code>rpm --import http://dag.wieers.com/rpm/packages/RPM-GPG-KEY.dag.txt</code></pre>


<ol>
<li>更新源, 安装FFMPEG</li>
</ol>


<pre><code>yum update
yum search ffmpeg
yum install ffmpeg ffmpeg-devel ffmpeg-libpostproc mencoder</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于gitosis创建新的版本仓库]]></title>
    <link href="http://raecoo.github.com/blog/2009/11/19/create-new-repository-based-gitosis.html"/>
    <updated>2009-11-19T00:00:00+08:00</updated>
    <id>http://raecoo.github.com/blog/2009/11/19/create-new-repository-based-gitosis</id>
    <content type="html"><![CDATA[<p>在此以添加一个名为VOD的版本库为例:</p>

<ol>
<li>编辑gitosis.conf, 为VOD版本库添加兩个可操作的成员, 并提交修改的配置文件.</li>
</ol>


<pre><code>[group team]
members = raecoo peter
writable   = vod
# commit modified
$git commit -a -m "Allow raecoo & peter write access to vod"
$git push</code></pre>


<ol>
<li>创建并初始化VOD版本库.</li>
</ol>


<pre><code>mkdir vod
$cd vod
$git init
$git remote add origin git@YOUR_SERVER_HOSTNAME:vod.git
# add and commit files
$git push origin master:refs/heads/master</code></pre>


<p>Reference: <a href="http://scie.nti.st/2007/11/14/hosting-git-repositories-the-easy-and-secure-way">http://scie.nti.st/2007/11/14/hosting-git-repositories-the-easy-and-secure-way</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开源软件的国内镜像站点]]></title>
    <link href="http://raecoo.github.com/blog/2009/11/09/open-source-mirrors-in-china.html"/>
    <updated>2009-11-09T00:00:00+08:00</updated>
    <id>http://raecoo.github.com/blog/2009/11/09/open-source-mirrors-in-china</id>
    <content type="html"><![CDATA[<p>网易镜像 <a href="http://mirrors.163.com/" target='_blank'>http://mirrors.163.com/</a>
搜狐镜像 <a href="http://mirrors.sohu.com/" target='_blank'>http://mirrors.sohu.com/</a></p>

<p>相比之下,搜狐镜像公开时间稍晚一些, 但内容从目录结构上看起来也丰富一些, 常见主流开源软件(基本上全是Linux发行版)都可找到. 希望越来越多有实力的国内公司提供类似的服务.</p>
]]></content>
  </entry>
  
</feed>
